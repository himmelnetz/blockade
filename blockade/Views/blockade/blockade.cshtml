@model blockade.BlockadeModel

@using Newtonsoft.Json;
@using System.Linq;

@{
	var colors = new[]
	{
		new[] { new[] { 63, 69, 154 }, new[] { 104, 112, 226 } }, // blue
		new[] { new[] { 164, 59, 59 }, new[] { 244, 97, 97 } }, // red
		new[] { new[] { 177, 174, 63 }, new[] { 214, 212, 102 } }, // yellow
		new[] { new[] { 56, 150, 81 }, new[] { 92, 224, 127 } }, // green
		new[] { new[] { 128, 71, 150 }, new[] { 191, 115, 221 } }, // purple
		new[] { new[] { 171, 130, 48 }, new[] { 219, 165, 57 } } // orange
	};
	
	var playerColorsForSelector = colors
		.Select(a => a[0].Zip(a[1], (c1, c2) => (c1 + c2) / 2).ToList())
		.ToList();
		
	Func<int, string> indexToPosition = (i) =>
	{
		switch (i)
		{
			case 0: return "1st";
			case 1: return "2nd";
			case 2: return "3rd";
			case 3: return "4th";
			case 4: return "5th";
			case 5: return "6th";
			case 6: return "7th";
			case 7: return "8th";
			default: throw new ArgumentOutOfRangeException();
		}
	};
}

<!DOCTYPE html>
<html>
<head>
    <title>Blockade</title>
    <link rel="stylesheet" href="/Content/reset.css" />
    <link rel="stylesheet" href="/Content/jquery-ui-smoothness.css" />
    <link rel="stylesheet" href="/Content/blockade.css" />
</head>
<body>

<div id="left-column">

<table id="board-table" class="board-blockade">
	@* intentionally blank; will be replaced immediately by the js *@
</table>
<div id="state-slider"></div>
<button id="play-new-game-button">Play new game</button>

<div id="configuration-selector">
	<div id="rows-selector">
		Rows: <span>10</span>
		<div id="rows-slider" class="rows-cols-slider"></div>
	</div>
	<div id="cols-selector">
		Cols: <span>10</span>
		<div id="cols-slider" class="rows-cols-slider"></div>
	</div>
	<table id="player-selector-table">
		<tr>
		@foreach (var playerNameI in Enumerable.Range(-1, Model.Players.Count + 1))
		{
			<td>@(playerNameI < 0 ? string.Empty : Model.Players[playerNameI].Name)</td>
		}
		</tr>
		@foreach (var playerI in Enumerable.Range(0, 4))
		{
			<tr>
			@foreach (var playerNameI in Enumerable.Range(-1, Model.Players.Count + 1))
			{
				if (playerNameI < 0)
				{
					<td id="player-@playerI-color" style='background-color: rgb(@(string.Join(", ", playerColorsForSelector[playerI].Select(i => i.ToString()))));'></td>
				}
				else
				{
					<td>
						<input type="radio" name="player-@playerI-radio-group" value="@(Model.Players[playerNameI].Name)" @(playerNameI == 0 ? "checked" : string.Empty) />
					</td>
				}
			}
			</tr>
		}
	</table>
</div>

</div> @* left-column *@

<div id="right-column">

<div>Results</div>
<table id="results-table">
	<tr>
		<td>Place</td>
		<td>Player</td>
		<td>Turn</td>
	</tr>
	@foreach (var resultI in Enumerable.Range(0, 4))
	{
		<tr>
			<td>@(indexToPosition(resultI))</td>
			<td id="result-td-@resultI"></td>
			<td id="result-td-survival-@resultI"></td>
		</tr>
	}
</table>

<div>Player Descriptions</div>
<table id="player-descriptions">
	<tr>
		<td>Name</td>
		<td>Description</td>
	</tr>
	@foreach (var player in Model.Players)
	{
		<tr>
			<td>@player.Name</td>
			<td>@player.Description</td>
		</tr>
	}
</table>

<button id="play-many-games-button">Play many games</button>

</div> @* right-column *@

<script src="/Scripts/jquery-2.1.4.min.js"></script>
<script src="/Scripts/jquery-ui.js"></script>

<script>
	var COLORS = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(colors))');
</script>

<script src="/Scripts/blockade.js"></script>

</body>
</html>
