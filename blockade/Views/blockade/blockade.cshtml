@model blockade.BlockadeModel

@using Newtonsoft.Json;
@using System.Linq;

@{
	const int NUM_OF_CURRENT_PLAYERS = 4;

	var colors = new[]
	{
		new[] { new[] { 63, 69, 154 }, new[] { 104, 112, 226 } }, // blue
		new[] { new[] { 164, 59, 59 }, new[] { 244, 97, 97 } }, // red
		new[] { new[] { 177, 174, 63 }, new[] { 214, 212, 102 } }, // yellow
		new[] { new[] { 56, 150, 81 }, new[] { 92, 224, 127 } }, // green
		new[] { new[] { 128, 71, 150 }, new[] { 191, 115, 221 } }, // purple
		new[] { new[] { 171, 130, 48 }, new[] { 219, 165, 57 } } // orange
	};
	
	var playerColorsForSelector = colors
		.Select(a => a[0].Zip(a[1], (c1, c2) => (c1 + c2) / 2).ToList())
		.ToArray();
		
	Func<int, string> indexToPosition = (i) =>
	{
		switch (i)
		{
			case 0: return "1st";
			case 1: return "2nd";
			case 2: return "3rd";
			case 3: return "4th";
			case 4: return "5th";
			case 5: return "6th";
			case 6: return "7th";
			case 7: return "8th";
			default: throw new ArgumentOutOfRangeException();
		}
	};
}

<!DOCTYPE html>
<html>
<head>
    <title>Blockade</title>
    <link rel="stylesheet" href="/Content/reset.css" />
    <link rel="stylesheet" href="/Content/jquery-ui-smoothness.css" />
    <link rel="stylesheet" href="/Content/blockade.css" />
</head>
<body>

@***************@
@* GAME VIEWER *@
@***************@

<table><tr><td>

<table id="board-table" class="board-blockade">
	@* intentionally blank; will be replaced immediately by the js *@
</table>
<div id="state-slider"></div>
<button id="play-new-game-button">Play new game</button>

</td><td>

<div>Results</div>
<table id="results-table">
	<tr>
		<td>Place</td>
		<td>Player</td>
		<td>Turn</td>
	</tr>
	@foreach (var resultI in Enumerable.Range(0, NUM_OF_CURRENT_PLAYERS))
	{
		<tr>
			<td>@(indexToPosition(resultI))</td>
			<td id="result-td-@resultI"></td>
			<td id="result-td-survival-@resultI"></td>
		</tr>
	}
</table>

</td></tr></table>

<table><tr><td>

@**************************@
@* CONFIGURATION SELECTOR *@
@**************************@

<div id="configuration-selector">
	<div id="rows-selector">
		Rows: <span>10</span>
		<div id="rows-slider" class="rows-cols-slider"></div>
	</div>
	<div id="cols-selector">
		Cols: <span>10</span>
		<div id="cols-slider" class="rows-cols-slider"></div>
	</div>
	<table id="player-selector-table" class="player-table">
		<tr>
		@foreach (var playerNameI in Enumerable.Range(-1, Model.Players.Count + 1))
		{
			<td>@(playerNameI < 0 ? string.Empty : Model.Players[playerNameI].Name)</td>
		}
		</tr>
		@foreach (var playerI in Enumerable.Range(0, NUM_OF_CURRENT_PLAYERS))
		{
			<tr>
			@foreach (var playerNameI in Enumerable.Range(-1, Model.Players.Count + 1))
			{
				if (playerNameI < 0)
				{
					<td id="player-@playerI-color" style='background-color: rgb(@(string.Join(", ", playerColorsForSelector[playerI].Select(i => i.ToString()))));'></td>
				}
				else
				{
					<td>
						<input type="radio" name="player-@playerI-radio-group" value="@(Model.Players[playerNameI].Name)" @(playerNameI == 0 ? "checked" : string.Empty) />
					</td>
				}
			}
			</tr>
		}
	</table>
</div>

</td><td>

@***********************@
@* PLAYER DESCRIPTIONS *@
@***********************@

<div>Player Descriptions</div>
<table id="player-descriptions">
	<tr>
		<td>Name</td>
		<td>Description</td>
	</tr>
	@foreach (var player in Model.Players)
	{
		<tr>
			<td>@player.Name</td>
			<td>@player.Description</td>
		</tr>
	}
</table>

@**************************@
@**************************@
@**************************@

</td></tr></table>

@*********************@
@* MANY GAMES RUNNER *@
@*********************@

<div id="many-game-runner">
	<button id="play-many-games-button">Play many games</button>
	<table id="many-game-result-table" class="player-table">
		<tr>
		@foreach (var resultI in Enumerable.Range(-1, NUM_OF_CURRENT_PLAYERS + 1))
		{
			<td>@(resultI >= 0 ? indexToPosition(resultI) : string.Empty)</td>
		}
		</tr>
		@foreach (var playerI in Enumerable.Range(0, NUM_OF_CURRENT_PLAYERS))
		{
			<tr>
			@foreach (var resultI in Enumerable.Range(-1, NUM_OF_CURRENT_PLAYERS + 1))
			{
				if (resultI < 0)
				{
					<td style='background-color: rgb(@(string.Join(", ", playerColorsForSelector[playerI].Select(i => i.ToString()))));'></td>
				}
				else
				{
					<td id="play-many-games-result-player-@playerI-result-@resultI"></td>
				}
			}
			</tr>
		}
	</table>
</div>

@**************************@
@**************************@
@**************************@

</td></tr></table>

<script src="/Scripts/jquery-2.1.4.min.js"></script>
<script src="/Scripts/jquery-ui.js"></script>

<script>
	var ColorProvider = function() {
		var Colors = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(colors))');
		var Single_Colors = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(playerColorsForSelector))');
		
		var _tuple_to_rgb_string = function(tuple) {
			return "rgb(" + tuple[0] + ", " + tuple[1] + ", " + tuple[2] + ")";
		};
		
		var get_player_main_color_rgb_string = function(player_i) {
			return _tuple_to_rgb_string(player_i >= 0
				? Single_Colors[player_i]
				: [255, 255, 255]);
		};
		
		var get_player_mix_color_rgb_string = function(player_i, decay_factor /* [0.0, 1.0] */) {
			if (player_i < 0) {
				return _tuple_to_rgb_string([255, 255, 255]);
			}
			
			var red = Math.round(Colors[player_i][0][0] * (1.0 - decay_factor) + Colors[player_i][1][0] * decay_factor);
			var green = Math.round(Colors[player_i][0][1] * (1.0 - decay_factor) + Colors[player_i][1][1] * decay_factor);
			var blue = Math.round(Colors[player_i][0][2] * (1.0 - decay_factor) + Colors[player_i][1][2] * decay_factor);
			return _tuple_to_rgb_string([red, green, blue]);
		};
		
		return {
			get_player_main_color_rgb_string: get_player_main_color_rgb_string,
			get_player_mix_color_rgb_string: get_player_mix_color_rgb_string
		};
	};
</script>

<script src="/Scripts/blockade.js"></script>

</body>
</html>
